name: Deploy AWS Lambda Functions

on:
  push:
    branches:
      - main
      - feat/aws-scheduler
    paths:
      - 'src/lambdas/**'
      - '.github/workflows/deploy-lambda.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'demo'
        type: choice
        options:
        - demo
        - production

env:
  AWS_REGION: us-east-1

jobs:
  detect-changes:
    name: Detect Lambda Changes
    runs-on: ubuntu-latest
    outputs:
      caller-scores-and-standings: ${{ steps.changes.outputs.caller-scores-and-standings }}
      caller-knockouts-update: ${{ steps.changes.outputs.caller-knockouts-update }}
      layers-changed: ${{ steps.changes.outputs.layers }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            caller-scores-and-standings:
              - 'src/lambdas/caller-scores-and-standings.mjs'
            caller-knockouts-update:
              - 'src/lambdas/caller-knockouts-update.mjs'
            layers:
              - 'src/lambdas/layers/**'

  deploy-layers:
    name: Deploy Lambda Layers
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.layers-changed == 'true'
    environment: ${{ github.event.inputs.environment || 'demo' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy best-shot-main layer
        run: |
          cd src/lambdas/layers/best-shot-main
          
          # Update layer
          LAYER_VERSION=$(aws lambda publish-layer-version \
            --layer-name best-shot-main \
            --description "Best Shot main layer with metadata and utilities - $(date)" \
            --zip-file fileb://nodejs.zip \
            --compatible-runtimes nodejs18.x nodejs20.x \
            --region $AWS_REGION \
            --query 'Version' --output text)
          
          echo "MAIN_LAYER_VERSION=$LAYER_VERSION" >> $GITHUB_ENV
          echo "✅ Published best-shot-main layer version: $LAYER_VERSION"

      - name: Deploy sentry layer
        run: |
          cd src/lambdas/layers/sentry
          
          # Update layer
          LAYER_VERSION=$(aws lambda publish-layer-version \
            --layer-name sentry \
            --description "Sentry monitoring layer for error tracking - $(date)" \
            --zip-file fileb://nodejs.zip \
            --compatible-runtimes nodejs18.x nodejs20.x \
            --region $AWS_REGION \
            --query 'Version' --output text)
          
          echo "SENTRY_LAYER_VERSION=$LAYER_VERSION" >> $GITHUB_ENV
          echo "✅ Published sentry layer version: $LAYER_VERSION"

  deploy-functions:
    name: Deploy Lambda Functions
    runs-on: ubuntu-latest
    needs: [detect-changes, deploy-layers]
    if: always() && (needs.detect-changes.outputs.caller-scores-and-standings == 'true' || needs.detect-changes.outputs.caller-knockouts-update == 'true' || needs.deploy-layers.result == 'success')
    environment: ${{ github.event.inputs.environment || 'demo' }}
    
    strategy:
      matrix:
        function:
          - name: caller-scores-and-standings
            description: "Updates match scores and tournament standings"
          - name: caller-knockouts-update  
            description: "Updates knockout tournament brackets"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Check if function needs update
        id: check-function
        run: |
          FUNCTION_NAME="${{ matrix.function.name }}"
          
          # Check if this specific function changed
          if [[ "$FUNCTION_NAME" == "caller-scores-and-standings" ]]; then
            CHANGED="${{ needs.detect-changes.outputs.caller-scores-and-standings }}"
          elif [[ "$FUNCTION_NAME" == "caller-knockouts-update" ]]; then
            CHANGED="${{ needs.detect-changes.outputs.caller-knockouts-update }}"
          else
            CHANGED="false"
          fi
          
          # Also update if layers changed
          LAYERS_CHANGED="${{ needs.detect-changes.outputs.layers-changed }}"
          
          if [[ "$CHANGED" == "true" || "$LAYERS_CHANGED" == "true" ]]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
            echo "🚀 Will deploy $FUNCTION_NAME (function changed: $CHANGED, layers changed: $LAYERS_CHANGED)"
          else
            echo "should-deploy=false" >> $GITHUB_OUTPUT
            echo "⏭️ Skipping $FUNCTION_NAME (no changes detected)"
          fi

      - name: Create deployment package
        if: steps.check-function.outputs.should-deploy == 'true'
        run: |
          cd src/lambdas
          
          # Create clean zip file
          zip -r ${{ matrix.function.name }}.zip ${{ matrix.function.name }}.mjs
          
          echo "📦 Created deployment package for ${{ matrix.function.name }}"
          ls -la ${{ matrix.function.name }}.zip

      - name: Update Lambda function code
        if: steps.check-function.outputs.should-deploy == 'true'
        run: |
          cd src/lambdas
          
          aws lambda update-function-code \
            --function-name ${{ matrix.function.name }} \
            --zip-file fileb://${{ matrix.function.name }}.zip \
            --region $AWS_REGION
          
          echo "✅ Updated ${{ matrix.function.name }} code"

      - name: Update Lambda function layers
        if: steps.check-function.outputs.should-deploy == 'true' && needs.deploy-layers.result == 'success'
        run: |
          # Get latest layer versions
          MAIN_LAYER_ARN=$(aws lambda list-layer-versions \
            --layer-name best-shot-main \
            --query 'LayerVersions[0].LayerVersionArn' \
            --output text --region $AWS_REGION)
          
          SENTRY_LAYER_ARN=$(aws lambda list-layer-versions \
            --layer-name sentry \
            --query 'LayerVersions[0].LayerVersionArn' \
            --output text --region $AWS_REGION)
          
          # Update function configuration with new layers
          aws lambda update-function-configuration \
            --function-name ${{ matrix.function.name }} \
            --layers "$MAIN_LAYER_ARN" "$SENTRY_LAYER_ARN" \
            --region $AWS_REGION
          
          echo "✅ Updated ${{ matrix.function.name }} layers"
          echo "   Main layer: $MAIN_LAYER_ARN"
          echo "   Sentry layer: $SENTRY_LAYER_ARN"

      - name: Wait for function to be active
        if: steps.check-function.outputs.should-deploy == 'true'
        run: |
          echo "⏳ Waiting for ${{ matrix.function.name }} to be active..."
          
          aws lambda wait function-updated \
            --function-name ${{ matrix.function.name }} \
            --region $AWS_REGION
          
          echo "✅ ${{ matrix.function.name }} is now active"

      - name: Test Lambda function
        if: steps.check-function.outputs.should-deploy == 'true'
        run: |
          # Get function configuration to verify deployment
          aws lambda get-function-configuration \
            --function-name ${{ matrix.function.name }} \
            --region $AWS_REGION \
            --query '{FunctionName:FunctionName,LastModified:LastModified,State:State,CodeSha256:CodeSha256}' \
            --output table
          
          echo "🧪 Function configuration verified"

  deployment-summary:
    name: Deployment Summary
    runs-on: ubuntu-latest
    needs: [detect-changes, deploy-layers, deploy-functions]
    if: always()
    
    steps:
      - name: Deployment Summary
        run: |
          echo "## 🚀 Lambda Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.deploy-layers.result }}" == "success" ]]; then
            echo "✅ **Layers**: Updated successfully" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.deploy-layers.result }}" == "skipped" ]]; then
            echo "⏭️ **Layers**: No changes detected" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Layers**: Deployment failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.deploy-functions.result }}" == "success" ]]; then
            echo "✅ **Functions**: Updated successfully" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.deploy-functions.result }}" == "skipped" ]]; then
            echo "⏭️ **Functions**: No changes detected" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Functions**: Deployment failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment**: ${{ github.event.inputs.environment || 'demo' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY