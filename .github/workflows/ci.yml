name: Continuous Integration

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  quality-checks:
    name: Quality Checks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Enable Yarn 3
        run: corepack enable && corepack prepare yarn@3.8.7 --activate

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --immutable

      - name: Lint code
        run: yarn lint

      - name: Type check
        run: yarn compile

      - name: Run tests
        run: yarn test --passWithNoTests

      - name: Test build
        run: yarn build

  # Optional: Security and dependency checks
  security-checks:
    name: Security Checks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Enable Yarn 3
        run: corepack enable && corepack prepare yarn@3.8.7 --activate

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --immutable

      - name: Audit dependencies
        run: yarn audit || true # Don't fail on audit issues for now

  # Build and push Docker images after CI passes
  build-images:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [quality-checks, security-checks]
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    
    outputs:
      demo-image: ${{ steps.image.outputs.demo-image }}
      staging-image: ${{ steps.image.outputs.staging-image }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Configure Docker for gcr.io
        run: gcloud auth configure-docker --quiet

      - name: Set image tags
        id: image
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "demo-image=gcr.io/api-best-shot-demo/api-best-shot-demo:pr-${{ github.event.pull_request.number }}-${{ github.sha }}" >> $GITHUB_OUTPUT
          else
            echo "demo-image=gcr.io/api-best-shot-demo/api-best-shot-demo:${{ github.sha }}" >> $GITHUB_OUTPUT
            echo "staging-image=gcr.io/api-best-shot-staging/api-best-shot:staging-${{ github.sha }}" >> $GITHUB_OUTPUT
          fi

      - name: Build and push Docker image with GitHub Actions cache
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ steps.image.outputs.demo-image }}
            ${{ github.ref == 'refs/heads/main' && steps.image.outputs.staging-image || '' }}
          platforms: linux/amd64
          build-args: |
            BUILDKIT_INLINE_CACHE=1
          # Use GitHub Actions cache instead of registry cache to avoid GCR auth issues
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy to Demo environment (PRs and non-main branches)
  deploy-demo:
    name: Deploy to Demo
    runs-on: ubuntu-latest
    environment: demo
    needs: [build-images]
    if: github.event_name == 'pull_request' || (github.event_name == 'push' && github.ref != 'refs/heads/main')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: api-best-shot-demo

      - name: Enable Yarn 3
        run: corepack enable && corepack prepare yarn@3.8.7 --activate

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --immutable

      - name: Run Database Migrations - Demo
        run: npx drizzle-kit migrate
        env:
          DB_STRING_CONNECTION: ${{ secrets.DB_STRING_CONNECTION_DEMO }}

      - name: Trigger Cloud Build deployment
        run: |
          gcloud builds submit --no-source --config=cloudbuild.yaml --substitutions=COMMIT_SHA=${{ github.sha }}

  # Deploy to Staging environment (main branch only)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    environment: staging
    needs: [build-images]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: api-best-shot-staging

      - name: Enable Yarn 3
        run: corepack enable && corepack prepare yarn@3.8.7 --activate

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --immutable

      - name: Run Database Migrations - Staging
        run: npx drizzle-kit migrate
        env:
          DB_STRING_CONNECTION: ${{ secrets.DB_STRING_CONNECTION_STAGING }}
          NODE_ENV: staging

      - name: Set deployment variables
        id: vars
        run: |
          echo "DEPLOY_TIME=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_OUTPUT
          echo "SHORT_SHA=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT

      - name: Trigger Cloud Build deployment
        run: |
          gcloud builds submit --no-source \
            --config=cloudbuild.staging.yaml \
            --substitutions=COMMIT_SHA=${{ github.sha }},SHORT_SHA=${{ steps.vars.outputs.SHORT_SHA }},BRANCH_NAME=${GITHUB_REF#refs/heads/},_DEPLOY_TIME=${{ steps.vars.outputs.DEPLOY_TIME }}

      - name: Wait for deployment
        run: |
          echo "Waiting for staging deployment to complete..."
          sleep 30

      - name: Health check
        run: |
          HEALTH_URL="https://api-best-shot-staging-415034926128.us-east1.run.app/health"
          echo "Checking health endpoint: $HEALTH_URL"
          
          for i in {1..5}; do
            if curl -f -s -o /dev/null -w "%{http_code}" "$HEALTH_URL" | grep -q "200"; then
              echo "✅ Health check passed!"
              exit 0
            fi
            echo "Health check attempt $i failed, retrying..."
            sleep 10
          done
          
          echo "⚠️ Health check failed after 5 attempts"
          exit 0  # Don't fail the build, just warn
